name: crm
services:
  backend:
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: frappe/erpnext:${ERPNEXT_VERSION}
    networks:
      default: null
    platform: linux/amd64
    pull_policy: ${PULL_POLICY}
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
  configurator:
    command:
      - |
        ls -1 apps > sites/apps.txt; 
        bench set-config -g db_host $$DB_HOST; 
        bench set-config -gp db_port $$DB_PORT; 
        bench set-config -g redis_cache "redis://$$REDIS_CACHE"; 
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE"; 
        bench set-config -g redis_socketio "redis://$$REDIS_SOCKETIO"; 
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
        bench set-config -g use_ssl 1;
        bench config dns_multitenant on;
        bench new-site $$SITES \
          --force
          --db-type mariadb \
          --db-name erpnext \
          --db-user frappe \
          --db-password $$MYSQL_ROOT_PASSWORD \
          --db-root-username root \
          --db-root-password $$MYSQL_ROOT_PASSWORD \
          --mariadb-root-password $$MYSQL_ROOT_PASSWORD \
          --admin-password $$SITE_ADMIN_PASS \
          --no-mariadb-socket \
          --install-app erpnext;
        bench --site $$SITES set-config developer_mode 1;
        bench --site $$SITES clear-cache;
        bench setup add-domain https://$$SITES --site $$SITES;
        bench --site all migrate;
        bench --site all enable-scheduler;
    depends_on:
      db:
        condition: service_healthy
        required: true
      redis-cache:
        condition: service_started
        required: true
      redis-queue:
        condition: service_started
        required: true
    entrypoint:
      - bash
      - -c
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: "${DB_PORT}"
      REDIS_CACHE: ${REDIS_CACHE}
      REDIS_QUEUE: ${REDIS_QUEUE}
      REDIS_SOCKETIO: ${REDIS_SOCKETIO}
      SITES: ${SITES}
      SOCKETIO_PORT: "9000"
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    image: frappe/erpnext:${ERPNEXT_VERSION}
    networks:
      default: null
    platform: linux/amd64
    pull_policy: ${PULL_POLICY}
    restart: on-failure
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
  cron:
    command:
      - daemon
      - --docker
    depends_on:
      scheduler:
        condition: service_started
        required: true
    image: mcuadros/ofelia:latest
    networks:
      default: null
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
        bind:
          create_host_path: true
  db:
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --skip-innodb-read-only-compressed
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test:
        - CMD-SHELL
        - mysqladmin ping -h localhost --password=${DB_PASSWORD}
      interval: 1s
      retries: 20
    image: mariadb:10.6
    networks:
      default: null
    restart: unless-stopped
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/mysql
        volume: {}
  frontend:
    command:
      - nginx-entrypoint.sh
    depends_on:
      backend:
        condition: service_started
        required: true
      websocket:
        condition: service_started
        required: true
    environment:
      BACKEND: backend:8000
      CLIENT_MAX_BODY_SIZE: 50m
      FRAPPE_SITE_NAME_HEADER: $$host
      PROXY_READ_TIMEOUT: "120"
      SOCKETIO: websocket:9000
      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
      UPSTREAM_REAL_IP_RECURSIVE: "off"
    image: frappe/erpnext:${ERPNEXT_VERSION}
    labels:
      traefik.enable: "true"
      traefik.http.routers.frontend-http.entrypoints: websecure
      traefik.http.routers.frontend-http.rule: Host(`${SITES}`)
      traefik.http.routers.frontend-http.tls.certresolver: main-resolver
      traefik.http.services.frontend.loadbalancer.server.port: "8080"
    networks:
      default: null
    platform: linux/amd64
    pull_policy: ${PULL_POLICY}
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
  proxy:
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --certificatesResolvers.main-resolver.acme.httpChallenge=true
      - --certificatesResolvers.main-resolver.acme.httpChallenge.entrypoint=web
      - --certificatesResolvers.main-resolver.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesResolvers.main-resolver.acme.storage=/letsencrypt/acme.json
    image: traefik:v2.11
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "80"
        protocol: tcp
      - mode: ingress
        target: 443
        published: "443"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: volume
        source: cert-data
        target: /letsencrypt
        volume: {}
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
        bind:
          create_host_path: true
  queue-long:
    command:
      - bench
      - worker
      - --queue
      - long,default,short
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: frappe/erpnext:${ERPNEXT_VERSION}
    networks:
      default: null
    platform: linux/amd64
    pull_policy: ${PULL_POLICY}
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
  queue-short:
    command:
      - bench
      - worker
      - --queue
      - short,default
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: frappe/erpnext:${ERPNEXT_VERSION}
    networks:
      default: null
    platform: linux/amd64
    pull_policy: ${PULL_POLICY}
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
  redis-cache:
    image: redis:6.2-alpine
    networks:
      default: null
    restart: unless-stopped
  redis-queue:
    image: redis:6.2-alpine
    networks:
      default: null
    restart: unless-stopped
    volumes:
      - type: volume
        source: redis-queue-data
        target: /data
        volume: {}
  scheduler:
    command:
      - bench
      - schedule
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: frappe/erpnext:${ERPNEXT_VERSION}
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.datecron.command: bench --site all backup
      ofelia.job-exec.datecron.schedule: '${BACKUP_CRONSTRING}'
      ofelia.job-exec.datecron.user: frappe
      ofelia.job-exec.flush_email.command: bench --site ${SITES} execute frappe.email.queue.flush
      ofelia.job-exec.flush_email.schedule: '@every 5m'
      ofelia.job-exec.flush_email.user: frappe
      ofelia.job-exec.pull_email.command: bench --site ${SITES} execute frappe.email.doctype.email_account.email_account.pull
      ofelia.job-exec.pull_email.schedule: '@every 5m'
      ofelia.job-exec.pull_email.user: frappe
    networks:
      default: null
    platform: linux/amd64
    pull_policy: ${PULL_POLICY}
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
  websocket:
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    depends_on:
      configurator:
        condition: service_completed_successfully
        required: true
    image: frappe/erpnext:${ERPNEXT_VERSION}
    networks:
      default: null
    platform: linux/amd64
    pull_policy: ${PULL_POLICY}
    restart: unless-stopped
    volumes:
      - type: volume
        source: sites
        target: /home/frappe/frappe-bench/sites
        volume: {}
networks:
  default:
    name: crm_default
volumes:
  cert-data:
    name: crm_cert-data
  db-data:
    name: crm_db-data
  redis-queue-data:
    name: crm_redis-queue-data
  sites:
    name: crm_sites
x-backend-defaults:
  depends_on:
    configurator:
      condition: service_completed_successfully
  image: frappe/erpnext:${ERPNEXT_VERSION}
  pull_policy: ${PULL_POLICY}
  restart: unless-stopped
  volumes:
    - sites:/home/frappe/frappe-bench/sites
x-customizable-image:
  image: frappe/erpnext:${ERPNEXT_VERSION}
  pull_policy: ${PULL_POLICY}
  restart: unless-stopped
x-depends-on-configurator:
  depends_on:
    configurator:
      condition: service_completed_successfully